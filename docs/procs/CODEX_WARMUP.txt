================================================================================
 ðŸŽ¯ CODEX UAT QUICK-START
================================================================================

Role: Primary UAT/verification agent for Cage.

Use this file to rehydrate context quickly. For live status (including the new
config/streaming toggles), always consult:
- `docs/procs/PROCESS.txt`
- `docs/procs/CONTINUE.md`
- `docs/procs/TASKS.txt`

Those documents track current workstreams, handoffs, and priorities.

--------------------------------------------------------------------------------
 Project Snapshot
--------------------------------------------------------------------------------
- **Product**: Cage â€“ Age encryption automation tool (Rust)
- **Surfaces**: CLI binary (`cage`) + library API (`cage::*`)
- **Frameworks**: RSB for CLI orchestrations; PTY automation via `hub::portable_pty`
- **Config**: `AgeConfig` now loads from XDG/config paths (`cage.toml`) with
  backup/streaming settings; run `cage init` to scaffold directories and defaults
  (`--force` regenerates the file).
- **Testing**: `cargo test --all` + targeted integration/UAT suites

--------------------------------------------------------------------------------
 Stakeholder Expectations (MVP)
--------------------------------------------------------------------------------
1. **Dual Usage**: Cage must be fully usable both as a CLI and as a library. The
   library API needs ergonomic parity with CLI capabilities.
2. **Configuration Model**: Introduce a comprehensive configuration component
   (e.g. `CageConfig`) to manage passphrases, recipients, identities, streaming
   options, and other knobs centrally.
3. **Streaming Support**: Provide streaming encrypt/decrypt (Readers/Writers)
   for large-file workflows, avoiding temporary files. (Pipe strategy available
   via `CAGE_STREAMING_STRATEGY`, temp-file path remains default.)
4. **SSH Key Support**: Accept SSH identities for encrypt/decrypt operations
   across both file and streaming flows.
5. **ASCII Armor**: Continue supporting ASCII-armor output (already present).
6. **Deterministic/Derived Keys**: Allow derived key workflows (`age --derive`).
7. **Multi-Recipient Lifecycle**: First-class handling of recipient sets,
   including lifecycle management and audit metadata.
8. **Streaming Identity Parity**: Stream APIs must honor identity files and
   recipient lists, not just passphrase inputs.

--------------------------------------------------------------------------------
 Sandbox / Test Constraints
--------------------------------------------------------------------------------
- Some automated tests require a working PTY environment and the `age` binary.
  When run inside restrictive sandboxes, these tests auto-skip (look for
  messages indicating PTY unavailability). Always confirm on a full dev box
  before shipping changes touching PTY flows.

--------------------------------------------------------------------------------
 Security & Quality Concerns
--------------------------------------------------------------------------------
- **Binary Snooping**: Centralize user-facing strings and sensitive literals to
  minimize exposure in compiled binaries (now via the top-level `lang` module).
- **Test Gating**: Age-dependent tests (e.g. selective unlock suite, streaming
  round-trip) must skip gracefully when the `age` binary is unavailable to keep
  CI green.
- **Audit & Telemetry**: Enhanced logging without leaking secrets; structured
  events for downstream systems.
- **Parity Validation**: UAT should verify both CLI and library code paths for
  every major feature.

--------------------------------------------------------------------------------
 UAT Agent Checklist
--------------------------------------------------------------------------------
1. Hydrate process docs (PROCESS / CONTINUE / TASKS) for current status.
2. Review `docs/ref/ROADMAP.md` for strategic milestones.
3. Confirm any new deliverable against stakeholder expectations above.
4. Validate security constraints (string centralization, no secret leakage in
   logs/tests).
5. Run or request appropriate test suites; when PTY/age are unavailable note the
   auto-skip behaviour and capture a full run (e.g. `full_test_results.log`) from a
   PTY-capable environment.
6. Record findings in UAT reports or handoffs as required.

--------------------------------------------------------------------------------
 Useful References
--------------------------------------------------------------------------------
- `docs/ref/cage/LIBRARY_USAGE.md` â€“ Library integration examples (request API & streaming).
- `docs/ref/cage/BACKUP_RETENTION_DESIGN.md` â€“ Design notes for backup registry & retention.
- `docs/procs/PROCESS.txt` â€“ Workflow rules & priority context.
- `docs/procs/ROADMAP.md` â€“ Long-term roadmap & milestones.
- `src/` â€“ Core modules organized per MODULE_SPEC: `adp/` (adapters), `pty/`,
  `audit/`, `core/`, `mgr/`, `forge/`, `buff/`, `keygen/`, plus top-level `lang.rs`.
- `tests/` â€“ Unit, integration, PTY, and regression suites.
- Quick toggles: `CAGE_STREAMING_STRATEGY=temp|pipe|auto` (or `--streaming-strategy`) and
  backup settings via `cage.toml` (`backup.cleanup_on_success`, `backup.directory`,
  `backup.retention`).
- New CLI helpers: `cage config show|path|paths`, `cage adapter info`, `cage adapter health`.
- Streaming CLI entry point: `cage stream encrypt|decrypt` (wraps `CageManager::stream_with_request()`)
  with implementations now under `src/mgr/`.
- Key generation work is tracked under `CAGE-21`/`CAGE-22`; see
  `docs/ref/cage/KEYGEN_STRATEGY.md` for the pending CLI + adapter deliverables.
- Streaming guidance: README and `docs/ref/cage/LIBRARY_USAGE.md` include performance tables
  comparing passphrase vs recipient streaming (CAGE-12a/12b).

================================================================================
